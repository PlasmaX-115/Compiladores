//# Gramática del lenguaje delta

comment = r'[/][/].*|[/][*](.|\n)*?[*][/]'

//# La regex indica que debe empezar obligatoriamente con una letra, pero los demas caracteres pueden ser los que sean y cuantos sean.
identifier = r'[a-zA-Z]\w*' //# \w hace match con [0-9A-Za-z_], es decir, letras mayúsculas, minúsculas, dígitos y underscore (_).

program = statement* expression EOF
statement = declaration / assignment / if / while /dowhile
declaration = 'var' decl_variable (',' decl_variable)* ';'
decl_variable = identifier 
assignment = lhs_variable '=' expression ';'
lhs_variable = identifier
if = 'if' expression block ('else if' expression block)* (r'else' block)?
block = '{' statement* '}' //#Block es el código a ejecutar dependiendo de la condicion.
while = 'while' expression block
dowhile = 'do' block 'while' expression ';'
expression = comparison ('&&' comparison)*
comparison = additive ((r'(==)' / r'(!=)' / r'(>=)' / r'(>)' / r'(<=)' / r'(<)') additive)*
additive = multiplicative (('+' / '-' ) multiplicative)*
multiplicative = unary (('*' / '/' / '%') unary)*
unary = ('+' / '-' / '!')* primary
primary = literals / decimal / boolean / parenthesis / rhs_variable
literals = binary / octal / hexadecimal
binary = r'#b([0]|[1])+'
octal = r'#o[0-7]+'
hexadecimal = r'#x[0-9a-fA-F]+'
decimal = r'\d+'
boolean = 'true' / 'false'
parenthesis = '(' expression ')'
rhs_variable = identifier